<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GitHub Profile</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 900px;
      margin: 40px auto;
      padding: 0 20px;
      background: #f4f6f8;
      color: #333;
    }
    h1, h2 {
      color: #24292e;
    }
    .profile-info p {
      margin: 4px 0;
    }
    .repo-list ul {
      list-style: none;
      padding-left: 0;
    }
    .repo-list li {
      background: white;
      margin-bottom: 12px;
      padding: 12px;
      border-radius: 6px;
      box-shadow: 0 1px 3px rgb(27 31 35 / 0.12);
    }
    .repo-list a {
      font-weight: bold;
      color: #0366d6;
      text-decoration: none;
      font-size: 1.1em;
    }
    .repo-list a:hover {
      text-decoration: underline;
    }
    small {
      color: #586069;
    }
    input[type="text"] {
      padding: 8px;
      width: 300px;
      font-size: 1em;
      border: 1px solid #d1d5da;
      border-radius: 4px;
    }
    select {
      padding: 8px;
      font-size: 1em;
      border: 1px solid #d1d5da;
      border-radius: 4px;
      margin-left: 10px;
    }
  </style>
</head>
<body>

  <h1>GitHub Profile</h1>
  
  <div class="profile-info">
    <p><strong>Username:</strong> <%= profile.login %></p>
    <p><strong>Name:</strong> <%= profile.name || 'N/A' %></p>
    <p><strong>Bio:</strong> <%= profile.bio || 'No bio available' %></p>
    <p><strong>Public Repos:</strong> <%= profile.public_repos %></p>
    <p><strong>Followers:</strong> <%= profile.followers %></p>
    <p><strong>Following:</strong> <%= profile.following %></p>
    <p><strong>Profile URL:</strong> <a href="<%= profile.html_url %>" target="_blank"><%= profile.html_url %></a></p>
    <p><strong>Created At:</strong> <%= new Date(profile.created_at).toLocaleDateString() %></p>
    <p><strong>Updated At:</strong> <%= new Date(profile.updated_at).toLocaleDateString() %></p>
  </div>

  <h2>Repositories</h2>

  <div style="margin-bottom: 20px;">
    <input type="text" id="searchInput" placeholder="Search repositories..." />
    <select id="sortSelect">
      <option value="created_desc">Created (newest)</option>
      <option value="created_asc">Created (oldest)</option>
      <option value="updated_desc">Updated (newest)</option>
      <option value="updated_asc">Updated (oldest)</option>
      <option value="stars_desc">Stars (high to low)</option>
      <option value="stars_asc">Stars (low to high)</option>
    </select>
  </div>

  <div class="repo-list"></div>

  <script>
    const repos = <%- JSON.stringify(repos) %>;

    const searchInput = document.getElementById('searchInput');
    const sortSelect = document.getElementById('sortSelect');
    const repoListDiv = document.querySelector('.repo-list');

    function renderRepos(filteredRepos) {
      if (filteredRepos.length === 0) {
        repoListDiv.innerHTML = '<p>No repositories found.</p>';
        return;
      }

      let html = '<ul>';
      filteredRepos.forEach(repo => {
        html += `
          <li>
            <a href="${repo.html_url}" target="_blank">${repo.name}</a>
            <p>${repo.description || 'No description'}</p>
            <small>â˜… ${repo.stargazers_count} | Created: ${new Date(repo.created_at).toLocaleDateString()} | Updated: ${new Date(repo.updated_at).toLocaleDateString()}</small>
          </li>
        `;
      });
      html += '</ul>';
      repoListDiv.innerHTML = html;
    }

    function filterAndSortRepos() {
      let filtered = repos.filter(repo => repo.name.toLowerCase().includes(searchInput.value.toLowerCase()));

      switch(sortSelect.value) {
        case 'created_desc':
          filtered.sort((a,b) => new Date(b.created_at) - new Date(a.created_at));
          break;
        case 'created_asc':
          filtered.sort((a,b) => new Date(a.created_at) - new Date(b.created_at));
          break;
        case 'updated_desc':
          filtered.sort((a,b) => new Date(b.updated_at) - new Date(a.updated_at));
          break;
        case 'updated_asc':
          filtered.sort((a,b) => new Date(a.updated_at) - new Date(b.updated_at));
          break;
        case 'stars_desc':
          filtered.sort((a,b) => b.stargazers_count - a.stargazers_count);
          break;
        case 'stars_asc':
          filtered.sort((a,b) => a.stargazers_count - b.stargazers_count);
          break;
      }

      renderRepos(filtered);
    }

    searchInput.addEventListener('input', filterAndSortRepos);
    sortSelect.addEventListener('change', filterAndSortRepos);

    renderRepos(repos);
  </script>

</body>
</html>
